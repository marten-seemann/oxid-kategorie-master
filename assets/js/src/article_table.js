// Generated by CoffeeScript 1.7.1
(function() {
  "use strict";
  window.ArticleTable = (function() {
    function ArticleTable(dom_elem) {
      this.dom_elem = dom_elem;
      this.notifications = document.notification_handler;
      this.loading = this.notifications.loading;
      this.category_column_index = document.category_column_index;
      this.last_selected = false;
      this.classstring_selected = "row_selected jstree-draggable";
    }

    ArticleTable.prototype.initialize = function() {
      var counter, elem, _i, _len, _ref;
      this.tree = document.category_tree;
      this.oTable = this.dom_elem.dataTable({
        iDisplayLength: 15,
        "sDom": "<'row'<'col-sm-9'<'#no_cats'><'#hidden_articles'>><'col-sm-3'l>r><'#only_products_from_cat'>t<'row'<'col-sm-5'i><'col-sm-7'p>>",
        sPaginationType: "bootstrap",
        sWrapper: "dataTables_wrapper form-inline",
        oLanguage: {
          "sProcessing": lang.datatables_sProcessing,
          "sLengthMenu": lang.datatables_sLengthMenu,
          "sZeroRecords": lang.datatables_sZeroRecords,
          "sInfo": lang.datatables_sInfo,
          "sInfoEmpty": lang.datatables_sInfoEmpty,
          "sInfoFiltered": lang.datatables_sInfoFiltered,
          "sInfoPostFix": lang.datatables_sPostFix,
          "sSearch": lang.datatables_sSearch,
          "sInfoThousands": lang.datatables_sInfoThousands,
          "sUrl": "",
          "oPaginate": {
            "sFirst": lang.datatables_sFirst,
            "sPrevious": lang.datatables_sPrevious,
            "sNext": lang.datatables_sNext,
            "sLast": lang.datatables_sLast
          }
        },
        bProcessing: false,
        bServerSide: true,
        bAutoWidth: false,
        sProcessing: "",
        aoColumns: [
          null, null, null, null, null, null, null, {
            sClass: 'price',
            bSearchable: false
          }, {
            sClass: 'price',
            bSearchable: false
          }, {
            sClass: 'price',
            bSearchable: false
          }, null, null
        ],
        aaSorting: [[2, "asc"]],
        aLengthMenu: [[10, 15, 20, 25, 50, 100], [10, 15, 20, 25, 50, 100]],
        sAjaxSource: 'ajax/products.php',
        fnServerParams: (function(_this) {
          return function(aoData) {
            aoData.push({
              name: "only_empty_categories",
              value: $("#show_only_empty_categories").is(":checked") ? "true" : "false"
            });
            aoData.push({
              name: "hide_inactive_articles",
              value: $("#hide_inactive_articles").is(":checked") ? "true" : "false"
            });
            return aoData.push({
              name: "show_only_products_in_cat",
              value: _this.dom_elem.data("show_only_products_in_cat") != null ? _this.dom_elem.data("show_only_products_in_cat") : ""
            });
          };
        })(this),
        fnServerData: (function(_this) {
          return function(sSource, aoData, fnCallback) {
            return $.ajax({
              dataType: 'json',
              url: sSource,
              data: aoData,
              cache: false,
              error: function(data) {
                _this.loading.article_table = false;
                _this.notifications.checkDisplayLoading();
                return _this.notifications.showError(lang.error_product_list_load);
              },
              success: function(json) {
                _this.loading.article_table = false;
                _this.notifications.checkDisplayLoading();
                return fnCallback(json);
              },
              beforeSend: function() {
                _this.loading.article_table = true;
                return _this.notifications.checkDisplayLoading();
              }
            });
          };
        })(this),
        fnDrawCallback: (function(_this) {
          return function(oSettings) {
            var col, counter, iDisplayStart, row_selector, _i, _len, _ref;
            if (oSettings._iDisplayStart !== iDisplayStart) {
              iDisplayStart = oSettings._iDisplayStart;
              _this.tree.deselectAll();
            }
            row_selector = _this.dom_elem.find('tbody tr');
            row_selector.unbind();
            _this.hideColumn(_this.category_column_index);
            counter = 0;
            _ref = _this.columns;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              col = _ref[_i];
              if (counter === _this.category_column_index) {
                continue;
              }
              if (!col.visible) {
                _this.hideColumn(counter);
              }
              counter = counter + 1;
            }
            row_selector.bind('click', function(event) {
              var elements, target;
              target = $(event.currentTarget);
              if (event.ctrlKey || event.altKey) {
                target.toggleClass(_this.classstring_selected);
              } else if (event.shiftKey) {
                if (_this.last_selected.index() < target.index()) {
                  elements = _this.last_selected.nextUntil(target);
                } else {
                  elements = _this.last_selected.prevUntil(target);
                }
                elements.add(target).addClass(_this.classstring_selected);
                document.getSelection().removeAllRanges();
              } else {
                _this.getSelectedRows().removeClass(_this.classstring_selected);
                target.addClass(_this.classstring_selected);
              }
              _this.last_selected = target;
              return _this.tree.highlightCategories();
            });
            return row_selector.bind('mousedown', function(event) {
              var target;
              if (_this.getSelectedRows().length === 0) {
                target = $(event.currentTarget);
                target.toggleClass(_this.classstring_selected);
                _this.last_selected = target;
                return _this.tree.highlightCategories();
              }
            });
          };
        })(this)
      });
      $('#no_cats').html($('#no_cats_proto').html());
      $('#no_cats_proto').html("");
      $('#hidden_articles').html($('#hidden_articles_proto').html());
      $('#hidden_articles_proto').html("");
      $('#only_products_from_cat').html($('#only_products_from_cat_proto').html());
      $('#only_products_from_cat').hide();
      $('#only_products_from_cat_proto').html("");
      this.columns = [];
      if ($.cookie("category_master_columns")) {
        try {
          this.columns = $.parseJSON($.cookie("category_master_columns"));
        } catch (_error) {}
      }
      if (this.dom_elem.find("thead th").length !== this.columns.length) {
        if ($.cookie("category_master_columns")) {
          $.cookie("category_master_columns", null);
        }
        counter = 0;
        _ref = this.dom_elem.find("thead th");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          this.columns.push({
            title: $(elem).html(),
            visible: $(elem).hasClass("hidden") ? false : true
          });
          if ($.inArray(counter, document.article_table_hidden_columns) !== -1) {
            this.columns[counter].visible = false;
          }
          counter++;
        }
        if ($.media({
          'max-width': '1280px'
        })) {
          this.hideColumn(5);
        }
        if ($.media({
          'max-width': '1024px'
        })) {
          this.hideColumn(3);
        }
      }
      this.addListeners();
      return this.initializeAutoReload();
    };

    ArticleTable.prototype.addListeners = function() {
      $("#show_only_empty_categories").bind('change', (function(_this) {
        return function(event) {
          return _this.reloadData();
        };
      })(this));
      $("#hide_inactive_articles").bind('change', (function(_this) {
        return function(event) {
          return _this.reloadData();
        };
      })(this));
      this.dom_elem.find('thead input').typeWatch({
        callback: (function(_this) {
          return function(data, el) {
            return _this.search($("thead input").index(el), data);
          };
        })(this),
        wait: 600,
        highlight: true,
        captureLength: 0
      });
      $.contextMenu({
        selector: "" + this.dom_elem.selector + " thead th",
        build: (function(_this) {
          return function(trigger, event) {
            var col, column_selector_items, counter, _i, _len, _ref;
            column_selector_items = [];
            counter = 0;
            _ref = _this.columns;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              col = _ref[_i];
              if (counter === _this.category_column_index) {
                continue;
              }
              column_selector_items.push({
                name: col.title,
                icon: col.visible ? "ok" : ""
              });
              counter = counter + 1;
            }
            return {
              callback: function(key, options) {
                _this.toggleColumn(key, true);
                return true;
              },
              items: column_selector_items
            };
          };
        })(this)
      });
      $(document).bind("drag_start.vakata", (function(_this) {
        return function(e, data) {
          var between, elem, index, obj, selected, text, title_td;
          $("body").css('cursor', 'move');
          obj = $(data.data.obj);
          text = "<div id='dragg_notifier'>";
          selected = _this.getSelectedRows();
          between = selected.first();
          between = between.add(selected.first().nextUntil(selected.last()));
          between = between.add(selected.last());
          for (index in between) {
            elem = between[index];
            if ($.inArray(elem, selected) > -1) {
              title_td = $(elem).children().filter('td').first();
              text += "<div class='row'>" + title_td.html() + "</div>";
            }
          }
          text += "</div>";
          $("#vakata-dragged").html(text);
          return e.preventDefault();
        };
      })(this));
      $(document).bind("drag_stop.vakata", (function(_this) {
        return function(e, data) {
          return $("body").css('cursor', 'auto');
        };
      })(this));
      return $("#only_products_from_cat").bind('close', (function(_this) {
        return function(event) {
          $(event.currentTarget).hide();
          $("#show_only_empty_categories").removeAttr("disabled");
          _this.dom_elem.data("show_only_products_in_cat", "");
          _this.reloadData();
          return false;
        };
      })(this));
    };

    ArticleTable.prototype.initializeAutoReload = function() {
      var category_update_interval, category_update_time, category_update_timer;
      category_update_timer = false;
      category_update_time = false;
      category_update_interval = document.config.category_update_time;
      $(document).idleTimer(category_update_interval * 5);
      category_update_timer = setInterval((function(_this) {
        return function() {
          return _this.fetchCategories();
        };
      })(this), category_update_interval);
      $(document).bind("idle.idleTimer", (function(_this) {
        return function() {
          if ((new Date() - category_update_time) * 2.5 > document.category_update_time) {
            _this.fetchCategories();
          }
          clearInterval(category_update_timer);
          return category_update_timer = setInterval(function() {
            return _this.fetchCategories();
          }, category_update_interval * 2.5);
        };
      })(this));
      return $(document).bind("active.idleTimer", (function(_this) {
        return function() {
          if ((new Date() - category_update_time) > document.category_update_time) {
            _this.fetchCategories();
          }
          clearInterval(category_update_timer);
          return category_update_timer = setInterval(function() {
            return _this.fetchCategories();
          }, category_update_interval);
        };
      })(this));
    };

    ArticleTable.prototype.updateCategories = function(data) {
      var product, _i, _len;
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        product = data[_i];
        this.setCategoryTd(product.id, product.categories);
      }
      return this.tree.highlightCategories();
    };

    ArticleTable.prototype.setCategoryTd = function(id, categories) {
      return $("#" + id).children().filter("td").eq(this.category_column_index).html(categories.join(", "));
    };

    ArticleTable.prototype.getCategoriesOfSelected = function(only_main) {
      var cat, categories, ret, row, _i, _j, _len, _len1, _ref;
      if (only_main == null) {
        only_main = false;
      }
      ret = [];
      _ref = this.getSelectedRows();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        categories = $(row).children().filter("td").eq(this.category_column_index).html().split(", ");
        if (categories.length > 0 && categories[0] !== "") {
          if (only_main) {
            ret.push(categories[0]);
          } else {
            for (_j = 0, _len1 = categories.length; _j < _len1; _j++) {
              cat = categories[_j];
              ret.push(cat);
            }
          }
        }
      }
      return ret;
    };

    ArticleTable.prototype.getMainCategoriesOfSelected = function() {
      return this.getCategoriesOfSelected(true);
    };

    ArticleTable.prototype.fetchCategories = function() {
      var elem, ids, rows;
      rows = this.dom_elem.find('tbody tr');
      ids = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = rows.length; _i < _len; _i++) {
          elem = rows[_i];
          _results.push($(elem).attr('id'));
        }
        return _results;
      })();
      if (ids[0] == null) {
        return;
      }
      return $.ajax({
        type: "GET",
        url: "ajax/product_categories.php",
        dataType: "json",
        cache: false,
        data: {
          ids: ids.join(",")
        },
        success: (function(_this) {
          return function(data) {
            var category_update_time, product, _i, _len;
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              product = data[_i];
              _this.setCategoryTd(product.id, product.categories);
              category_update_time = new Date();
            }
            return _this.tree.highlightCategories();
          };
        })(this)
      });
    };

    ArticleTable.prototype.search = function(table_column_index, string) {
      return this.oTable.fnFilter(string, table_column_index);
    };

    ArticleTable.prototype.reloadData = function() {
      return this.oTable.fnDraw();
    };

    ArticleTable.prototype.hideColumn = function(index, setCookie) {
      var row, _i, _len, _ref;
      if (setCookie == null) {
        setCookie = false;
      }
      _ref = this.dom_elem.find('tr');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        $(row).children().eq(index).addClass('hidden');
      }
      this.columns[index].visible = false;
      if (setCookie) {
        return this.setColumnVisibilityCookie();
      }
    };

    ArticleTable.prototype.showColumn = function(index, setCookie) {
      var row, _i, _len, _ref;
      if (setCookie == null) {
        setCookie = false;
      }
      _ref = this.dom_elem.find('tr');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        $(row).children().eq(index).removeClass('hidden');
      }
      this.columns[index].visible = true;
      if (setCookie) {
        return this.setColumnVisibilityCookie();
      }
    };

    ArticleTable.prototype.toggleColumn = function(index, setCookie) {
      if (setCookie == null) {
        setCookie = false;
      }
      if (this.columns[index].visible) {
        return this.hideColumn(index, setCookie);
      } else {
        return this.showColumn(index, setCookie);
      }
    };

    ArticleTable.prototype.setColumnVisibilityCookie = function() {
      return $.cookie("category_master_columns", JSON.stringify(this.columns), {
        expires: 365
      });
    };

    ArticleTable.prototype.enableCategoryFiltering = function(cat_id) {
      var html, names, separator;
      names = this.tree.getParentsNames(cat_id);
      this.dom_elem.data("show_only_products_in_cat", cat_id);
      this.reloadData();
      $("#show_only_empty_categories").attr("disabled", "disabled");
      separator = "&nbsp;&nbsp;<i class=\"icon-chevron-right\"></i>&nbsp;&nbsp;";
      html = separator + names.join(separator);
      $('#only_products_from_cat div span').html(html);
      return $('#only_products_from_cat').show();
    };

    ArticleTable.prototype.getSelectedRows = function() {
      return this.oTable.$('tr.row_selected');
    };

    return ArticleTable;

  })();

}).call(this);
