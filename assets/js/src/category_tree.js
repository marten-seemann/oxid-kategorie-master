// Generated by CoffeeScript 1.6.2
(function() {
  "use strict";  window.CategoryTree = (function() {
    function CategoryTree(dom_elem) {
      this.dom_elem = dom_elem;
      this.selected = [];
      this.notifications = document.notification_handler;
      this.loading = this.notifications.loading;
    }

    CategoryTree.prototype.initialize = function() {
      var endtime, starttime,
        _this = this;

      this.article_table = document.article_table;
      starttime = new Date().getTime();
      this.loading.category_tree = true;
      this.notifications.checkDisplayLoading();
      this.dom_elem.jstree({
        types: {
          valid_children: ["root"],
          types: {
            root: {
              icon: {
                image: "jstree/_docs/_drive.png"
              }
            }
          }
        },
        ui: {
          select_multiple_modifier: "on",
          disable_selecting_children: false,
          selected_parent_close: false,
          selected_parent_open: true
        },
        search: {
          show_only_matches: true
        },
        core: {
          animation: 100
        },
        themes: {
          theme: 'default'
        },
        crrm: {
          move: {
            check_move: function(m) {
              return false;
            }
          }
        },
        cookies: {
          save_selected: false
        },
        json_data: {
          ajax: {
            url: "ajax/categories.php",
            cache: false,
            progressive_render: false,
            data: function(n) {
              return {
                id: n.attr ? n.attr("id") : 0
              };
            },
            complete: function() {
              _this.loading.category_tree = false;
              return _this.notifications.checkDisplayLoading();
            }
          }
        },
        dnd: {
          open_timeout: 500,
          drag_finish: function(data) {
            $("body").css('cursor', 'auto');
            return $(data.r).children("a").trigger("contextmenu");
          }
        },
        plugins: ["json_data", "ui", "themes", "search", "dnd", "crrm", "cookies"]
      });
      endtime = new Date().getTime();
      return this.addListeners();
    };

    CategoryTree.prototype.addListeners = function() {
      var showSubtree,
        _this = this;

      $('#tree_close_all input[type="button"]').bind('click', function() {
        _this.dom_elem.jstree("close_all", -1);
        return false;
      });
      this.dom_elem.filter("li a").bind('mousedown', function(event) {
        if (event.button !== 2) {

        }
      });
      this.dom_elem.bind('deselect_all.jstree', function(event, data) {
        return _this.dom_elem.find(".main_category, .category_for_all").removeClass("main_category category_for_all");
      });
      this.dom_elem.bind('hover_node.jstree', function(event, data) {
        var name_long, node;

        node = data.args[0];
        name_long = $(node).parent("li").data("name_long");
        if (!!name_long && name_long.length === 0) {
          return false;
        }
        $(node).tooltip({
          title: name_long,
          placement: 'left'
        });
        return $(node).tooltip('show');
      });
      this.dom_elem.bind('select_node.jstree', function(event, data) {
        if (data.args.length === 3) {
          return _this.dom_elem.jstree('deselect_node', $(data.args[0]));
        }
      });
      this.dom_elem.bind('deselect_node.jstree', function(event, data) {
        var contained, elem, _i, _len, _ref;

        if (!$(data.args[0]).is('li')) {
          return false;
        }
        contained = false;
        _ref = _this.selected;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          if ($(elem).attr('id') === data.args[0].attr('id')) {
            contained = true;
          }
        }
        if (contained) {
          return _this.dom_elem.jstree('select_node', $(data.args[0]));
        }
      });
      this.dom_elem.bind('after_open.jstree after_close.jstree loaded.jstree', function(event, data) {
        var tree_bottom_y;

        tree_bottom_y = _this.dom_elem.height() + _this.dom_elem.offset().top - $("#article_wrapper").position().top;
        if (tree_bottom_y < $(window).height()) {
          $('#sticky_scrolling_selector').hide();
          document.sticky_scrolling = false;
        } else {
          $('#sticky_scrolling_selector').show();
          $('#sticky_scrolling').triggerHandler('click');
          $('#sticky_scrolling').triggerHandler('click');
        }
        if ($.urlParam('only_cat').length > 0) {
          return _this.article_table.enableCategoryFiltering($.urlParam('only_cat'));
        }
      });
      showSubtree = function(elem) {
        var correctNode;

        correctNode = function(elem) {
          var child, children, last, _i, _len, _results;

          last = elem.children("li").eq(-1);
          last.addClass("jstree-last");
          children = elem.children("li");
          _results = [];
          for (_i = 0, _len = children.length; _i < _len; _i++) {
            child = children[_i];
            _results.push(correctNode($(child).children("ul:first")));
          }
          return _results;
        };
        elem.siblings("ul:first").find("li").show();
        return correctNode(elem.siblings("ul:first"));
      };
      $('#tree_search').typeWatch({
        callback: function(data, elem) {
          var endtime, starttime;

          _this.loading.category_tree = true;
          starttime = new Date().getTime();
          _this.dom_elem.jstree("search", data);
          endtime = new Date().getTime();
          showSubtree($(".jstree-search"));
          _this.highlightCategories;
          return _this.loading.category_tree = false;
        },
        wait: 600,
        highlight: true,
        captureLength: 0
      });
      return this.addContextMenu();
    };

    CategoryTree.prototype.addContextMenu = function() {
      var contextmenu_items,
        _this = this;

      contextmenu_items = {
        "main_category": {
          name: lang.contextmenu_set_main_category,
          icon: "heart"
        },
        "redefine": {
          name: lang.contextmenu_redefine,
          icon: "legal"
        },
        "add": {
          name: lang.contextmenu_add,
          icon: "plus"
        },
        "delete": {
          name: lang.contextmenu_remove,
          icon: "trash"
        },
        "sep1": "---------",
        "contained_products": {
          name: lang.contextmenu_only_products_from_this_cat,
          icon: "filter"
        },
        "open_category_admin": {
          name: lang.contextmenu_open_category_admin,
          icon: "external-link"
        },
        "sep2": "---------",
        "quit": {
          name: lang.contextmenu_quit,
          icon: "remove"
        }
      };
      return $.contextMenu({
        selector: "" + this.dom_elem.selector + " li a",
        build: function(trigger, event) {
          var contextmenu_items_tmp;

          if (!event.originalEvent && event.pageX) {
            return false;
          }
          contextmenu_items_tmp = {};
          $.extend(contextmenu_items_tmp, contextmenu_items);
          contextmenu_items_tmp.contained_products.disabled = !!$("#show_only_empty_categories").is(':checked');
          if (event.which == null) {
            contextmenu_items_tmp.contained_products.disabled = true;
            contextmenu_items_tmp.open_category_admin.disabled = true;
          }
          if (_this.article_table.getSelectedRows().length === 0) {
            contextmenu_items_tmp.add.disabled = true;
            contextmenu_items_tmp["delete"].disabled = true;
            contextmenu_items_tmp.redefine.disabled = true;
            contextmenu_items_tmp.main_category.disabled = true;
          } else {
            contextmenu_items_tmp.add.disabled = trigger.hasClass('category_for_all') ? true : false;
            contextmenu_items_tmp.main_category.disabled = trigger.hasClass('category_for_all main_category') ? true : false;
            if (event.button !== 2) {
              delete contextmenu_items_tmp["delete"];
            } else {
              contextmenu_items_tmp["delete"].disabled = _this.dom_elem.jstree('is_selected', trigger) && !trigger.hasClass('main_category') ? false : true;
            }
          }
          return {
            items: contextmenu_items_tmp,
            callback: function(key, options) {
              var elem, ids, newcat;

              newcat = options.$trigger.parent("li").attr('id').substr(5);
              if (key === "quit") {
                return true;
              } else if (key === "contained_products") {
                return _this.article_table.enableCategoryFiltering(newcat);
              } else if (key === "open_category_admin") {
                if (document.config.category_admin_path) {
                  return $.open_in_new_tab("" + document.config.category_admin_path + "?cat=" + newcat);
                } else {
                  return $('#modal_buy_category_admin').modal('toggle');
                }
              } else {
                ids = (function() {
                  var _i, _len, _ref, _results;

                  _ref = this.article_table.getSelectedRows();
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    elem = _ref[_i];
                    _results.push($(elem).attr('id'));
                  }
                  return _results;
                }).call(_this);
                return $.ajax({
                  type: "POST",
                  url: "ajax/assign.php",
                  dataType: "json",
                  cache: false,
                  data: {
                    mode: key,
                    ids: ids.join(","),
                    new_cat: newcat
                  },
                  error: function(data) {
                    return _this.notifications.showError(lang.error_categories_updated);
                  },
                  success: function(data, data2, data3) {
                    if (data === "false" || data === "") {
                      return _this.notifications.showError(lang.error_categories_updated);
                    } else {
                      _this.article_table.updateCategories(data);
                      return _this.notifications.showSuccess(lang.sucess_categories_updated);
                    }
                  }
                });
              }
            }
          };
        }
      });
    };

    CategoryTree.prototype.highlightCategories = function(open_nodes) {
      var cat, categories, categories_main, invisible_cats, node, num_rows_selected, settings, _i, _j, _len, _len1;

      if (open_nodes == null) {
        open_nodes = true;
      }
      settings = this.dom_elem.jstree("get_settings");
      if (settings.ui.selected_parent_open !== open_nodes) {
        settings.ui.selected_parent_open = open_nodes ? true : false;
        this.dom_elem.jstree("set_settings", settings);
      }
      invisible_cats = false;
      categories = this.article_table.getCategoriesOfSelected();
      this.dom_elem.jstree("deselect_all");
      num_rows_selected = this.article_table.getSelectedRows().length;
      for (_i = 0, _len = categories.length; _i < _len; _i++) {
        cat = categories[_i];
        if (cat.length === 0) {
          continue;
        }
        node = $("#node_" + $.escapeId(cat));
        this.dom_elem.jstree("select_node", node);
        if (node.is(':hidden')) {
          invisible_cats = true;
        }
        if ($.countOccurences(categories, cat) === num_rows_selected) {
          node.children("a").addClass('category_for_all');
        }
      }
      categories_main = this.article_table.getMainCategoriesOfSelected();
      for (_j = 0, _len1 = categories_main.length; _j < _len1; _j++) {
        cat = categories_main[_j];
        if (cat.length === 0) {
          continue;
        }
        node = $("#node_" + $.escapeId(cat));
        node.children("a").addClass('main_category');
        if ($.countOccurences(categories_main, cat) === num_rows_selected) {
          node.children("a").addClass('category_for_all');
        }
      }
      if (invisible_cats) {
        $("#search_hidden_cat_warning").show();
      } else {
        $("#search_hidden_cat_warning").hide();
      }
      return this.selected = this.dom_elem.jstree('get_selected');
    };

    CategoryTree.prototype.getParentsNames = function(cat_id) {
      var names, node;

      cat_id = $.escapeId(cat_id);
      return names = (function() {
        var _i, _len, _ref, _results;

        _ref = $("#node_" + cat_id).add($("#node_" + cat_id).parents().filter("li"));
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          _results.push($.trim($(node).children("a").text()));
        }
        return _results;
      })();
    };

    CategoryTree.prototype.deselectAll = function() {
      return this.dom_elem.jstree("deselect_all");
    };

    return CategoryTree;

  })();

}).call(this);
